_require "basis.smi"
_require "ffi.smi"

structure SDL2 =
struct
  (* SDLの例外 *)
  exception SDL_Error of string

  (* SDL_GetError *)
  val SDL_GetError : unit -> string

  (* SDL_Init *)
  datatype SDL_InitFlags =
      SDL_INIT_TIMER
    | SDL_INIT_AUDIO
    | SDL_INIT_VIDEO
    | SDL_INIT_JOYSTICK
    | SDL_INIT_HAPTIC
    | SDL_INIT_GAMECONTROLLER
    | SDL_INIT_EVENTS
    | SDL_INIT_SENSOR
    | SDL_INIT_NOPARACHUTE
    | SDL_INIT_EVERYTHING

  val SDL_Init : SDL_InitFlags list -> unit

  (* SDL_Log *)
  val SDL_Log : string -> unit
  val SDL_Log1 : ['a#boxed. string * 'a -> unit]
  val SDL_Log2 : ['a#boxed, 'b#boxed. string * 'a * 'b -> unit]
  val SDL_Log3 : ['a#boxed, 'b#boxed, 'c#boxed. string * 'a * 'b * 'c -> unit]

  (* SDL_Quit *)
  val SDL_Quit : unit -> unit

  (* SDL_Window *)
  type SDL_Window (= ptr)

  (* SDL_CreateWindow *)
  datatype SDL_WindowFlags =
      SDL_WINDOW_FULLSCREEN
    | SDL_WINDOW_OPENGL
    | SDL_WINDOW_SHOWN
    | SDL_WINDOW_HIDDEN
    | SDL_WINDOW_BORDERLESS
    | SDL_WINDOW_RESIZABLE
    | SDL_WINDOW_MINIMIZED
    | SDL_WINDOW_MAXIMIZED
    | SDL_WINDOW_INPUT_GRABBED
    | SDL_WINDOW_INPUT_FOCUS
    | SDL_WINDOW_MOUSE_FOCUS
    | SDL_WINDOW_FULLSCREEN_DESKTOP
    | SDL_WINDOW_FOREIGN
    | SDL_WINDOW_ALLOW_HIGHDPI
    | SDL_WINDOW_MOUSE_CAPTURE
    | SDL_WINDOW_ALWAYS_ON_TOP
    | SDL_WINDOW_SKIP_TASKBAR
    | SDL_WINDOW_UTILITY
    | SDL_WINDOW_TOOLTIP
    | SDL_WINDOW_POPUP_MENU
    | SDL_WINDOW_VULKAN
    | SDL_WINDOW_METAL

  val SDL_WINDOWPOS_UNDEFINED : int
  val SDL_WINDOWPOS_CENTERED : int

  val SDL_CreateWindow : string * int * int * int * int * SDL_WindowFlags list -> SDL_Window

  (* SDL_DestroyWindow *)
  val SDL_DestroyWindow : SDL_Window -> unit

  (* SDL_Delay *)
  val SDL_Delay : word32 -> unit

  (* SDL_Surface *)
  type SDL_Surface (= ptr)
  type SDL_PixelFormat (= ptr)
  val SDL_Surface_GetFormat : SDL_Surface -> SDL_PixelFormat

  (* SDL_GetWindowSurface *)
  val SDL_GetWindowSurface : SDL_Window -> SDL_Surface

  (* SDL_Rect *)
  type SDL_Rect =
    {
      x: int,
      y: int,
      w: int,
      h: int
    }

  (* SDL_FillRect *)
  val SDL_FillRect : SDL_Surface * SDL_Rect option * word32 -> unit

  (* SDL_UpdateWindowSurface *)
  val SDL_UpdateWindowSurface : SDL_Window -> unit

  (* SDL_MapRGB *)
  val SDL_MapRGB : SDL_PixelFormat * word8 * word8 * word8 -> word32

  (* SDL_Event *)
  datatype SDL_MouseButtonIndex =
      SDL_BUTTON_LEFT
    | SDL_BUTTON_MIDDLE
    | SDL_BUTTON_RIGHT
    | SDL_BUTTON_X1
    | SDL_BUTTON_X2

  type SDL_MouseMotionEvent =
    {
      x: int,
      y: int
    }

  type SDL_MouseButtonEvent =
    {
      button: SDL_MouseButtonIndex,
      x: int,
      y: int
    }

  datatype SDL_Event =
      SDL_QUIT
    (* iOS evnets *)
    | SDL_APP_TERMINATING
    | SDL_APP_LOWMEMORY
    | SDL_APP_WILLENTERBACKGROUND
    | SDL_APP_DIDENTERBACKGROUND
    | SDL_APP_WILLENTERFOREGROUND
    | SDL_APP_DIDENTERFOREGROUND
    | SDL_LOCALECHANGED
    (* Display events *)
    | SDL_DISPLAYEVENT
    (* Window events *)
    | SDL_WINDOWEVENT
    | SDL_SYSWMEVENT
    (* Keyboard events *)
    | SDL_KEYDOWN
    | SDL_KEYUP
    | SDL_TEXTEDITING
    | SDL_TEXTINPUT
    | SDL_KEYMAPCHANGED
    (* Mouse events *)
    | SDL_MOUSEMOTION of SDL_MouseMotionEvent
    | SDL_MOUSEBUTTONDOWN of SDL_MouseButtonEvent
    | SDL_MOUSEBUTTONUP of SDL_MouseButtonEvent
    | SDL_MOUSEWHEEL
    (* Joystick events *)
    | SDL_JOYAXISMOTION
    | SDL_JOYBALLMOTION
    | SDL_JOYHATMOTION
    | SDL_JOYBUTTONDOWN
    | SDL_JOYBUTTONUP
    | SDL_JOYDEVICEADDED
    | SDL_JOYDEVICEREMOVED
    (* Game controller events *)
    | SDL_CONTROLLERAXISMOTION
    | SDL_CONTROLLERBUTTONDOWN
    | SDL_CONTROLLERBUTTONUP
    | SDL_CONTROLLERDEVICEADDED
    | SDL_CONTROLLERDEVICEREMOVED
    | SDL_CONTROLLERDEVICEREMAPPED
    | SDL_CONTROLLERTOUCHPADDOWN
    | SDL_CONTROLLERTOUCHPADMOTION
    | SDL_CONTROLLERTOUCHPADUP
    | SDL_CONTROLLERSENSORUPDATE
    (* Touch events *)
    | SDL_FINGERDOWN
    | SDL_FINGERUP
    | SDL_FINGERMOTION
    (* Gesture events *)
    | SDL_DOLLARGESTURE
    | SDL_DOLLARRECORD
    | SDL_MULTIGESTURE
    (* Clipboard events *)
    | SDL_CLIPBOARDUPDATE
    (* Drag and drop events *)
    | SDL_DROPFILE
    | SDL_DROPTEXT
    | SDL_DROPBEGIN
    | SDL_DROPCOMPLETE
    (* Audio hotplug events *)
    | SDL_AUDIODEVICEADDED
    | SDL_AUDIODEVICEREMOVED
    (* Sensor events *)
    | SDL_SENSORUPDATE
    (* Render events *)
    | SDL_RENDER_TARGETS_RESET
    | SDL_RENDER_DEVICE_RESET
    (* User event *)
    | SDL_USEREVENT

  (* PollEvent *)
  val SDL_PollEvent : unit -> SDL_Event option

  (* SDL_Renderer *)
  type SDL_Renderer (= ptr)

  (* SDL_RendererFlags *)
  datatype SDL_RendererFlags =
      SDL_RENDERER_SOFTWARE
    | SDL_RENDERER_ACCELERATED
    | SDL_RENDERER_PRESENTVSYNC
    | SDL_RENDERER_TARGETTEXTURE

  (* SDL_CreateRenderer *)
  val SDL_CreateRenderer : SDL_Window * int * SDL_RendererFlags list -> SDL_Renderer

  (* SDL_GetRenderer *)
  val SDL_GetRenderer : SDL_Window -> SDL_Renderer

  (* SDL_DestroyRenderer *)
  val SDL_DestroyRenderer : SDL_Renderer -> unit

  (* SDL_SetRenderDrawColor *)
  val SDL_SetRenderDrawColor : SDL_Renderer * word8 * word8 * word8 * word8 -> unit

  (* SDL_RenderClear *)
  val SDL_RenderClear : SDL_Renderer -> unit

  (* SDL_RenderPresent *)
  val SDL_RenderPresent : SDL_Renderer -> unit

  (* SDL_RenderDrawRect *)
  val SDL_RenderDrawRect : SDL_Renderer * SDL_Rect option -> unit

  (* SDL_RenderFillRect *)
  val SDL_RenderFillRect : SDL_Renderer * SDL_Rect option -> unit

  (* SDL_RenderDrawLine *)
  val SDL_RenderDrawLine : SDL_Renderer * int * int * int * int -> unit

  (* SDL_RenderDrawPoint *)
  val SDL_RenderDrawPoint : SDL_Renderer * int * int -> unit
end
